import numpy as np
import matplotlib.pyplot as plt
# mAP_2 = [0.88745318,0.60138785,0.64970522,0.81177211,0.50554513,0.48839605,0.60933912,0.64498803,0.68921084,0.59956744]
# mAP_3 = [0.89422603,0.64412479,0.67156211,0.84393054,0.58062995,0.56878963,0.60716076,0.74773206,0.70303509, .65492179]
# mAP_4 = [0.88740871,0.61493375,0.70073257,0.85576908,0.56301025,0.55890543,0.59164852,0.72153778,0.75507831,0.72259169]
# mAP_6 = [0.90116213,0.59672953,0.65175493,0.82937685,0.62697186,0.58502803,0.61612564,0.75333079,0.75597785,0.67290152]
# mAP_5 = [0.88608969,0.61062843,0.66960112,0.8556245,0.56542228,0.60667369,0.66523037,0.75616594,0.78058613,0.65846769]

# x = np.arange(1, 11)  # 类别编号

# plt.figure(figsize=(10, 6))
# plt.plot(x, mAP_2, marker='o', label='mAP_2')
# plt.plot(x, mAP_3, marker='o', label='mAP_3')
# plt.plot(x, mAP_4, marker='o', label='mAP_4')
# plt.plot(x, mAP_5, marker='o', label='mAP_5')
# plt.plot(x, mAP_6, marker='o', label='mAP_6')

# plt.xlabel('Class Index')
# plt.ylabel('mAP')
# plt.title('mAP Comparison')
# plt.legend()
# plt.grid(True)
# plt.xticks(x, [str(i) for i in x])  # 显示1到10的所有下标
# plt.tight_layout()
# plt.show()

# mAP_5 = [0.88608969,0.61062843,0.66960112,0.8556245,0.56542228,0.60667369,0.66523037,0.75616594,0.78058613,0.65846769]
# mAP: [0.88308518 0.71418994 0.68977796 0.84474763 0.51545117 0.58034895
#  0.63086436 0.7439309  0.75209948 0.67531163]
# mAP: [0.87352829 0.62909884 0.65840335 0.8311538  0.40521223 0.56989924
#  0.577064   0.68695118 0.75068075 0.64295222]
# mAP: [0.89647628 0.63090576 0.72665228 0.84741683 0.56471389 0.58240375
#  0.64656191 0.74991187 0.79002892 0.66810809]
# mAP: [0.89340831 0.69578524 0.69364903 0.86401477 0.55467534 0.5536603
#  0.55598674 0.73010516 0.77187733 0.66012091]
# mAP: [0.90344635 0.67618122 0.70272204 0.83604501 0.44913066 0.48665868
#  0.52645953 0.69260822 0.71379994 0.54305241]
# mAP: [0.89324331 0.63746903 0.71597553 0.84814502 0.5117605  0.53780252
#  0.55981487 0.75652294 0.76886137 0.74164005]
# mAP: [0.87743598 0.70304242 0.69800621 0.84493322 0.50623193 0.5338597
#  0.54393555 0.6515953  0.72836542 0.63713129]
# mAP_4 = [0.88608969, 0.61062843, 0.66960112, 0.8556245, 0.56542228, 0.60667369, 0.66523037, 0.75616594, 0.78058613, 0.65846769]
# mAP_5 = [0.88308518, 0.71418994, 0.68977796, 0.84474763, 0.51545117, 0.58034895, 0.63086436, 0.7439309, 0.75209948, 0.67531163]
# mAP_6 = [0.87352829, 0.62909884, 0.65840335, 0.8311538, 0.40521223, 0.56989924, 0.577064, 0.68695118, 0.75068075, 0.64295222]
# mAP_7 = [0.89647628, 0.63090576, 0.72665228, 0.84741683, 0.56471389, 0.58240375, 0.64656191, 0.74991187, 0.79002892, 0.66810809]
# mAP_8 = [0.89340831, 0.69578524, 0.69364903, 0.86401477, 0.55467534, 0.5536603, 0.55598674, 0.73010516, 0.77187733, 0.66012091]
# mAP_9 = [0.90344635, 0.67618122, 0.70272204, 0.83604501, 0.44913066, 0.48665868, 0.52645953, 0.69260822, 0.71379994, 0.54305241]
# mAP_1 = [0.89324331, 0.63746903, 0.71597553, 0.84814502, 0.5117605, 0.53780252, 0.55981487, 0.75652294, 0.76886137, 0.74164005]
# mAP_2 = [0.87743598, 0.70304242, 0.69800621, 0.84493322, 0.50623193, 0.5338597, 0.54393555, 0.6515953, 0.72836542, 0.63713129]
# mAP_3 = [0.87469479, 0.69211804, 0.63901333, 0.85475397, 0.4826107 ,0.57367819, 0.54597905, 0.71435074, 0.70367239, 0.62047368]
# print("mean", np.mean(mAP_3))
# x = np.arange(1, 11)  # 类别编号
# plt.figure(figsize=(10, 6))
# plt.plot(x, mAP_1, marker='o', label='64-1')
# plt.plot(x, mAP_2, marker='o', label='64-2')
# plt.plot(x, mAP_3, marker='o', label='64-3')
# plt.plot(x, mAP_4, marker='o', label='128-1')
# plt.plot(x, mAP_5, marker='o', label='128-2')
# plt.plot(x, mAP_6, marker='o', label='128-3')
# plt.plot(x, mAP_7, marker='o', label='256-1')
# plt.plot(x, mAP_8, marker='o', label='256-2')
# plt.plot(x, mAP_9, marker='o', label='256-3')

# plt.xlabel('Class Index')
# plt.ylabel('mAP')
# plt.title('mAP Comparison')
# plt.legend()
# plt.grid(True)
# plt.xticks(x, [str(i) for i in x])  # 显示1到10的所有下标
# plt.tight_layout()
# plt.show()
# 64-3
# mAP: [0.87469479 0.69211804 0.63901333 0.85475397 0.4826107  0.57367819
#  0.54597905 0.71435074 0.70367239 0.62047368]
# .0799435 .0741902 .12176 
# .572449  .537289  .635511 
# .658216  .649048  .676109 
# 2-128
# mAP: [0.88308518 0.71418994 0.68977796 0.84474763 0.51545117 0.58034895
#  0.63086436 0.7439309  0.75209948 0.67531163]
# # .0924296 .0860123 .153223 
# # .598648  .583306  .634021 
# # .653054  .664036  .651168 
# # 3-128
# mAP: [0.87352829 0.62909884 0.65840335 0.8311538  0.40521223 0.56989924
#  0.577064   0.68695118 0.75068075 0.64295222]
# # .112794 .0975029 .180824 
# # .578164 .548715  .630766 
# # .644593 .653721  .647735 
# 2-256
# mAP: [0.89340831 0.69578524 0.69364903 0.86401477 0.55467534 0.5536603
#  0.55598674 0.73010516 0.77187733 0.66012091]
# # .103646 .0874239 .175374 
# # .603931 .584172  .647258 
# # .661883 .652595  .680752 
# 1-256
# mAP: [0.89647628 0.63090576 0.72665228 0.84741683 0.56471389 0.58240375
#  0.64656191 0.74991187 0.79002892 0.66810809]
# # .139262 .106147 .245629 
# # .617564 .668301 .596374 
# # .665176 .703695 .642629 
# 3-256
# mAP: [0.90344635 0.67618122 0.70272204 0.83604501 0.44913066 0.48665868
#  0.52645953 0.69260822 0.71379994 0.54305241]
# # .102538 .0905128 .180691 
# # .573756 .54627   .648255 
# # .640876 .636522  .669209 

# 64-1
# mAP: [0.89324331 0.63746903 0.71597553 0.84814502 0.5117605  0.53780252
#  0.55981487 0.75652294 0.76886137 0.74164005]
# # .0883322 .0675479 .155195 
# # .596123  .662676  .558428 
# # .624381  .723351  .575928 
# 64-2
# mAP: [0.87743598 0.70304242 0.69800621 0.84493322 0.50623193 0.5338597
#  0.54393555 0.6515953  0.72836542 0.63713129]
# # .076344 .0604525 .156643 
# # .572827 .530024  .634647 
# # .616217 .628773  .630201 

#noise
# mAP: [0.89318988 0.54187225 0.70325649 0.86789972 0.47556001 0.46914782
#  0.45080293 0.69943951 0.68270771 0.60584681]
# Quick Report: 
# |               |   f_measure |   precision |   recall |
# |---------------|-------------|-------------|----------|
# | event_based   |   0.0855205 |   0.0791673 | 0.125171 |
# | segment_based |   0.470673  |   0.690597  | 0.393347 |
# | tagging_based |   0.47266   |   0.760505  | 0.38149  |

#orignal
# mAP: [0.89647628 0.63090576 0.72665228 0.84741683 0.56471389 0.58240375
#  0.64656191 0.74991187 0.79002892 0.66810809]
# Quick Report: 
# |               |   f_measure |   precision |   recall |
# |---------------|-------------|-------------|----------|
# | event_based   |    0.139262 |    0.106147 | 0.245629 |
# | segment_based |    0.617564 |    0.668301 | 0.596374 |
# | tagging_based |    0.665176 |    0.703695 | 0.642629 |

#time_mask
# Quick Report: 
# |               |   f_measure |   precision |    recall |
# |---------------|-------------|-------------|-----------|
# | event_based   |   0.0361917 |   0.0262633 | 0.0737493 |
# | segment_based |   0.444947  |   0.528812  | 0.408902  |
# | tagging_based |   0.345199  |   0.615184  | 0.273515  |

#time_shift
# mAP: [0.89748979 0.63358979 0.69790308 0.85589616 0.55203289 0.54658505
#  0.59787501 0.752448   0.78231717 0.71484095]
# Quick Report: 
# |               |   f_measure |   precision |   recall |
# |---------------|-------------|-------------|----------|
# | event_based   |    0.123617 |   0.0924228 | 0.230047 |
# | segment_based |    0.602004 |   0.643272  | 0.591399 |
# | tagging_based |    0.645833 |   0.69905   | 0.615795 |

